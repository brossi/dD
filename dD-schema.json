{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Development Directives for LLM Collaboration",
  "description": "Schema definition for the LLM development directives document.",
  "$comment": "This schema validates the structure of development directives for LLM collaboration. Key validation features include: 1) CROSS-REFERENCES: Use post-processing to verify references between rules. 2) RULE TYPE VALIDATION: Uses allOf/if/then conditionals for type validation. 3) PATTERN VALIDATION: For IDs and other fields. 4) ADDITIONAL PROPERTIES: Strict validation with additionalProperties:false. 5) TYPE-SPECIFIC FORMATS: Each rule type has specific requirements.",
  "type": "object",
  "properties": {
    "version": {
      "type": "string",
      "description": "Semantic version of the directives document format.",
      "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
    },
    "last_updated": {
      "type": "string",
      "format": "date",
      "description": "Date the directives document was last updated."
    },
    "dev_directives_version": {
      "type": "string",
      "description": "Internal version identifier for the directives content.",
      "pattern": "^\\d+\\.\\d+$"
    },
    "description": {
      "type": "string",
      "description": "Overall description of the directives document.",
      "minLength": 1
    },
    "global_definitions": { "$ref": "#/definitions/globalDefinitions" },
    "rule_category_definitions": { "$ref": "#/definitions/ruleCategoryDefinitions" },
    "enforcement_levels": { "$ref": "#/definitions/definitionMap" },
    "validation_types": { "$ref": "#/definitions/definitionMap" },
    "RULE_SET": {
      "type": "array",
      "description": "The main list of development directive rules.",
      "items": { "$ref": "#/definitions/ruleObject" },
      "minItems": 1
    }
  },
  "additionalProperties": false,
  "required": [
    "version",
    "last_updated",
    "dev_directives_version",
    "description",
    "global_definitions",
    "rule_category_definitions",
    "enforcement_levels",
    "validation_types",
    "RULE_SET"
  ],
  "definitions": {
    "definitionMap": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z_]+$": { "type": "string", "minLength": 1 }
      },
      "description": "A map defining terms (like enforcement levels or validation types) and their descriptions.",
      "minProperties": 1
    },

    "globalDefinitions": {
      "type": "object",
      "properties": {
        "complete_for_slice": { "type": "string", "minLength": 1 },
        "project_workspace": { "type": "string", "minLength": 1 },
        "vertical_slice": { "type": "string", "minLength": 1 },
        "acronyms": { "$ref": "#/definitions/definitionMap" },
        "terminology": { "$ref": "#/definitions/definitionMap" }
      },
      "additionalProperties": false,
      "required": ["complete_for_slice", "project_workspace", "vertical_slice", "acronyms", "terminology"]
    },

    "ruleCategoryDefinitions": {
      "type": "object",
      "properties": {
        "core_principles": { "$ref": "#/definitions/categoryDefinition" },
        "operational_guidelines": { "$ref": "#/definitions/categoryDefinition" },
        "communication_protocols": { "$ref": "#/definitions/categoryDefinition" },
        "human_llm_collaboration": { "$ref": "#/definitions/categoryDefinitionHLC" },
        "implementation_guidelines": { "$ref": "#/definitions/categoryDefinition" },
        "system_constraints": { "$ref": "#/definitions/categoryDefinition" }
      },
      "additionalProperties": false,
      "required": [
        "core_principles",
        "operational_guidelines",
        "communication_protocols",
        "human_llm_collaboration",
        "implementation_guidelines",
        "system_constraints"
      ]
    },

    "categoryDefinition": {
      "type": "object",
      "properties": {
        "prefix": { "type": "string", "pattern": "^[A-Z]{2,}$" },
        "description": { "type": "string", "minLength": 1 },
        "sub_categories": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z_]+$": { "$ref": "#/definitions/subCategoryDefinition" }
          },
          "minProperties": 1
        }
      },
      "additionalProperties": false,
      "required": ["prefix", "sub_categories"]
    },

    "categoryDefinitionHLC": {
      "type": "object",
      "properties": {
        "prefix": { "type": "string", "pattern": "^[A-Z]{2,}$" },
        "description": { "type": "string", "description": "Overall description for HLC category", "minLength": 1 },
        "enforcement": {
          "type": "string",
          "$comment": "VALIDATION REQUIREMENT: This value MUST be one of the keys defined in the top-level enforcement_levels object. JSON Schema can't enforce this directly, so external validation is needed."
        },
        "validation_type": {
          "type": "string",
          "$comment": "VALIDATION REQUIREMENT: This value MUST be one of the keys defined in the top-level validation_types object. JSON Schema can't enforce this directly, so external validation is needed."
        },
        "sub_categories": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z_]+$": { "$ref": "#/definitions/subCategoryDefinition" }
          },
          "minProperties": 1
        }
      },
      "additionalProperties": false,
      "required": ["prefix", "sub_categories", "enforcement", "validation_type"]
    },

    "subCategoryDefinition": {
      "type": "object",
      "properties": {
        "prefix": { "type": "string", "pattern": "^[A-Z]{2}$" },
        "enforcement": {
          "type": "string",
          "$comment": "VALIDATION REQUIREMENT: This value MUST be one of the keys defined in the top-level enforcement_levels object. JSON Schema can't enforce this directly, so external validation is needed."
        },
        "validation_type": {
          "type": "string",
          "$comment": "VALIDATION REQUIREMENT: This value MUST be one of the keys defined in the top-level validation_types object. JSON Schema can't enforce this directly, so external validation is needed."
        },
        "description": { "type": "string", "minLength": 1 },
        "example_rules": { "type": "array", "items": { "type": "string", "minLength": 1 } }
      },
      "additionalProperties": false,
      "required": ["prefix", "description"]
    },

    "ruleObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[A-Z]+\\.[A-Z0-9.]+\\.\\d+$",
          "description": "Unique identifier (e.g., CP.TA.01)"
        },
        "category": {
          "type": "string",
          "$comment": "Should be one of the keys in rule_category_definitions"
        },
        "sub_category": { "type": "string" },
        "status": {
          "type": "string",
          "enum": ["active", "deprecated", "draft"]
        },
        "created_date": { "type": "string", "format": "date" },
        "last_modified": { "type": "string", "format": "date" },
        "deprecation_date": { "type": ["string", "null"], "format": "date" },
        "compliance_level": {
          "type": "string",
          "enum": ["required", "recommended", "optional"]
        },
        "enforcement": {
          "type": "string",
          "$comment": "VALIDATION REQUIREMENT: This value MUST be one of the keys defined in the top-level enforcement_levels object. JSON Schema can't enforce this directly, so external validation is needed."
        },
        "type": {
          "type": "string",
          "description": "Defines the type of the rule content.",
          "enum": [
            "statement", "response", "definition", "principles", "checklist",
            "procedure", "tool", "rules", "roles", "constraint"
          ]
        },
        "description": {
          "type": "string",
          "description": "Concise summary of the rule's purpose.",
          "minLength": 1
        },
        "title": {
          "type": "string",
          "description": "Optional human-readable title for the rule.",
          "minLength": 1
        },
        "notes": { "type": "array", "items": { "type": "string", "minLength": 1 } },
        "keywords": { "type": "array", "items": { "type": "string", "minLength": 1 } },
        "validation": { "$ref": "#/definitions/validationObject" },
        "references_rules": {
          "type": "array",
          "items": { "$ref": "#/definitions/relationshipObject" }
        },
        "examples": {
          "type": "array",
          "items": { "$ref": "#/definitions/exampleObject" }
        },
        "parameters": { "type": "object" }
      },
      "additionalProperties": false,
      "required": [
        "id", "category", "sub_category", "status", "created_date", "last_modified", "deprecation_date",
        "compliance_level", "enforcement", "type", "description"
      ],
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "statement" } } },
          "then": {
            "properties": { "statement": { "type": "string", "minLength": 1 } },
            "required": ["statement"]
          }
        },
        {
          "if": { "properties": { "type": { "const": "response" } } },
          "then": {
            "properties": {
              "condition": { "type": "string", "minLength": 1 },
              "response": { "type": "string", "minLength": 1 }
            },
            "required": ["condition", "response"]
          }
        },
        {
          "if": { "properties": { "type": { "const": "definition" } } },
          "then": {
            "properties": { "definition": { "type": "string", "minLength": 1 } },
            "required": ["definition"]
          }
        },
        {
          "if": { "properties": { "type": { "const": "principles" } } },
          "then": {
            "properties": {
              "principles": { "$ref": "#/definitions/statementRationaleArray" }
            },
            "required": ["principles"]
          }
        },
        {
          "if": { "properties": { "type": { "const": "rules" } } },
          "then": {
            "properties": {
              "rules": { "$ref": "#/definitions/statementRationaleArray" }
            },
            "required": ["rules"]
          }
        },
        {
          "if": { "properties": { "type": { "const": "checklist" } } },
          "then": {
            "properties": {
              "checkpoints": { "$ref": "#/definitions/checkpointObject" }
            },
            "required": ["checkpoints"]
          }
        },
        {
          "if": { "properties": { "type": { "const": "procedure" } } },
          "then": {
            "properties": {
              "condition": { "type": "string", "minLength": 1 },
              "steps": { "$ref": "#/definitions/stepsArray" },
              "output_format_template": {
                "type": "object",
                "properties": {
                  "format_type": {
                    "type": "string",
                    "enum": ["json", "markdown", "text", "table", "yaml"]
                  },
                  "structure": {
                    "type": "object",
                    "description": "Schema describing the expected output structure"
                  },
                  "example": { "type": "string", "minLength": 1 }
                },
                "additionalProperties": false,
                "required": ["format_type"]
              }
            },
            "required": ["steps"]
          }
        },
        {
          "if": { "properties": { "type": { "const": "tool" } } },
          "then": {
            "properties": {
              "tool_name": { "type": "string", "minLength": 1 },
              "description": { "type": "string", "minLength": 1 },
              "parameters": {
                "type": "object",
                "properties": {
                  "required": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string", "minLength": 1 },
                        "type": {
                          "type": "string",
                          "enum": ["string", "number", "boolean", "array", "object"]
                        },
                        "description": { "type": "string", "minLength": 1 }
                      },
                      "additionalProperties": false,
                      "required": ["name", "type"]
                    }
                  },
                  "optional": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string", "minLength": 1 },
                        "type": {
                          "type": "string",
                          "enum": ["string", "number", "boolean", "array", "object"]
                        },
                        "description": { "type": "string", "minLength": 1 },
                        "default_value": { }
                      },
                      "additionalProperties": false,
                      "required": ["name", "type"]
                    }
                  }
                },
                "additionalProperties": false
              },
              "constraints": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "constraint_type": {
                      "type": "string",
                      "minLength": 1,
                      "enum": [
                        "path_exists",
                        "file_exists",
                        "directory_exists",
                        "permission",
                        "file_type",
                        "size_limit",
                        "pattern_match",
                        "value_in_range",
                        "dependency"
                      ]
                    },
                    "description": { "type": "string", "minLength": 1 },
                    "parameter": { "type": "string", "minLength": 1 },
                    "validation_params": {
                      "type": "object",
                      "description": "Additional parameters needed for validation based on constraint_type"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["constraint_type", "description"]
                }
              },
              "path_requirements_ref": { "type": "string", "minLength": 1 },
              "command_construction_rules_ref": { "type": "string", "minLength": 1 },
              "usage_example": { "type": "string", "minLength": 1 }
            },
            "required": ["tool_name"]
          }
        },
        {
          "if": { "properties": { "type": { "const": "roles" } } },
          "then": {
            "properties": {
              "area": { "type": "string", "minLength": 1 },
              "roles": { "$ref": "#/definitions/rolesArray" }
            },
            "required": ["roles", "area"]
          }
        },
        {
          "if": { "properties": { "type": { "const": "constraint" } } },
          "then": {
            "properties": {
              "constraint": { "type": "string", "minLength": 1 },
              "value": { },
              "unit": { "type": "string", "minLength": 1 }
            },
            "required": ["value"]
          }
        }
      ]
    },

    "statementRationaleArray": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "statement": { "type": "string", "minLength": 1 },
          "rationale": { "type": "string", "minLength": 1 }
        },
        "additionalProperties": false,
        "required": ["statement"]
      },
      "minItems": 1
    },

    "stepsArray": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "step": { "type": "number", "minimum": 1 },
          "action": { "type": "string", "minLength": 1 }
        },
        "additionalProperties": false,
        "required": ["step", "action"]
      },
      "minItems": 1
    },

    "rolesArray": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "actor": { "type": "string", "minLength": 1 },
          "responsibilities": {
            "type": "array",
            "items": { "type": "string", "minLength": 1 },
            "minItems": 1
          }
        },
        "additionalProperties": false,
        "required": ["actor", "responsibilities"]
      },
      "minItems": 1
    },

    "checkpointObject": {
      "type": "object",
      "properties": {
        "daily": { "$ref": "#/definitions/checkpointQuestions" },
        "slice_completion": { "$ref": "#/definitions/checkpointQuestions" }
      },
      "additionalProperties": false,
      "required": ["daily", "slice_completion"]
    },

    "checkpointQuestions": {
      "type": "object",
      "properties": {
        "questions": {
          "type": "array",
          "items": { "type": "string", "minLength": 1 },
          "minItems": 1
        }
      },
      "additionalProperties": false,
      "required": ["questions"]
    },

    "validationObject": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "$comment": "VALIDATION REQUIREMENT: This value MUST be one of the keys defined in the top-level validation_types object. JSON Schema can't enforce this directly, so external validation is needed."
        },
        "criteria": { "type": "string", "minLength": 1 },
        "parameters": { "type": "object" },
        "tool_suggestion": {
          "type": "array",
          "items": { "type": "string", "minLength": 1 }
        },
        "blocking": { "type": "boolean" },
        "notes": {
          "type": ["string", "array"],
          "items": { "type": "string", "minLength": 1 }
        }
      },
      "additionalProperties": false,
      "required": ["type", "criteria"]
    },

    "relationshipObject": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "pattern": "^[A-Z]+\\.[A-Z0-9.]+\\.\\d+$" },
        "relationship": {
          "type": "string",
          "enum": [
            "depends_on", "enhances", "conflicts_with", "supersedes",
            "related_to", "implements", "refines", "extends",
            "supportive", "implementation", "complementary"
          ],
          "description": "Type of relationship between rules. Ensure this value is one of the defined relationship types."
        },
        "note": { "type": "string", "minLength": 1 }
      },
      "additionalProperties": false,
      "required": ["id", "relationship"]
    },

    "exampleObject": {
      "type": "object",
      "properties": {
        "title": { "type": "string", "minLength": 1 },
        "scenario": { "type": ["object", "string"], "minLength": 1 },
        "before": { "type": "string", "minLength": 1 },
        "after": { "type": "string", "minLength": 1 },
        "good": { "type": "object" },
        "bad": { "type": "object" }
      },
      "additionalProperties": false
    }
  }
}
